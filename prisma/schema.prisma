generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id                         Int                          @id @default(autoincrement()) @db.UnsignedInt
  categoryName               String                       @db.VarChar(30)
  iconURL                    String?                      @db.VarChar(300)
  posts                      posts[]
}

model comments {
  id          BigInt    @id @default(autoincrement())
  usersID     Int       @db.UnsignedInt
  postsID     BigInt
  htmlContent String    @db.VarChar(300)
  replyTo     BigInt?
  replyLevel  Int       @default(0) @db.TinyInt
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime? @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  posts       posts     @relation(fields: [postsID], references: [id], onDelete: Cascade, map: "FK_comments_postsID_posts_id")
  users       users     @relation(fields: [usersID], references: [id], onDelete: Cascade, map: "FK_comments_usersID_users_id")

  @@index([postsID], map: "FK_comments_postsID_posts_id")
  @@index([usersID], map: "FK_comments_usersID_users_id")
}

model imageUpload {
  id            BigInt   @id @default(autoincrement())
  usersID       Int?     @db.UnsignedInt
  pathUrl       String   @db.VarChar(300)
  fileSizeBytes Int
  fileType      String   @db.VarChar(20)
  createdAt     DateTime @db.DateTime(0)
  users         users?   @relation(fields: [usersID], references: [id], map: "FK_imageUpload_usersID_users_id")

  @@index([usersID], map: "FK_imageUpload_usersID_users_id")
}

model postLike {
  id      BigInt   @id @default(autoincrement())
  usersID Int      @db.UnsignedInt
  postsID BigInt
  likedAt DateTime @db.DateTime(0)
  posts   posts    @relation(fields: [postsID], references: [id], onDelete: Cascade, map: "FK_postLike_postsID_posts_id")
  users   users    @relation(fields: [usersID], references: [id], onDelete: Cascade, map: "FK_postLike_usersID_users_id")

  @@index([postsID], map: "FK_postLike_postsID_posts_id")
  @@index([usersID], map: "FK_postLike_usersID_users_id")
}

model postView {
  id       BigInt   @id @default(autoincrement())
  userIP   String   @db.VarChar(16)
  postsID  BigInt
  viewedAt DateTime @db.DateTime(0)
  posts    posts    @relation(fields: [postsID], references: [id], onDelete: Cascade, map: "FK_postView_postsID_posts_id")

  @@index([postsID], map: "FK_postView_postsID_posts_id")
}

model posts {
  id              BigInt      @id @default(autoincrement())
  usersID         Int         @db.UnsignedInt
  categoryID      Int         @db.UnsignedInt
  title           String      @db.VarChar(50)
  thumbNailURL    String?     @db.VarChar(300)
  viewCounts      Int         @default(0) @db.UnsignedInt
  likes           Int         @default(0) @db.UnsignedInt
  markDownContent String?     @db.MediumText
  private         Int         @default(0) @db.TinyInt
  createdAt       DateTime    @db.DateTime(0)
  updatedAt       DateTime?   @db.DateTime(0)
  deletedAt       DateTime?   @db.DateTime(0)
  category        category    @relation(fields: [categoryID], references: [id], onDelete: Cascade, map: "FK_posts_categoryID_category_id")
  users           users       @relation(fields: [usersID], references: [id], onDelete: Cascade, map: "FK_posts_usersID_users_id")
  comments        comments[]
  postLike        postLike[]
  postView        postView[]

  @@index([categoryID], map: "FK_posts_categoryID_category_id")
  @@index([likes, createdAt], map: "createdAt_likes_INDEX")
  @@index([usersID, id], map: "userID_postID_INDEX")
}

model users {
  id                    Int                    @id @default(autoincrement()) @db.UnsignedInt
  oAuthType             String                 @db.VarChar(10)
  oAuthServiceID        String                 @db.VarChar(50)
  userName              String                 @default("User") @db.VarChar(50)
  proFileImageURL       String?                @db.VarChar(300)
  mailAddress           String?                @db.VarChar(50)
  password              String?                @db.VarChar(50)
  accessToken           String                 @db.VarChar(255)
  refreshToken          String?                @db.VarChar(255)
  createdAt             DateTime               @db.DateTime(0)
  updatedAt             DateTime?              @db.DateTime(0)
  deletedAt             DateTime?              @db.DateTime(0)
  admin                 Int                    @default(0) @db.TinyInt
  comments              comments[]
  imageUpload           imageUpload[]
  postLike              postLike[]
  posts                 posts[]
}
